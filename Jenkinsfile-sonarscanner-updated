pipeline{
    agent any
    tools{
        maven 'maven-3.9.0'
    }
    stages{
        stage('git checkout using ssh'){
            steps{
                git branch: 'master', credentialsId: 'jenkins-ssh-private-key', url: 'git@github.com:cloudtechmasters/springboot-maven-course-micro-svc.git'
            }
        }
        stage('build maven project'){
            steps{
                sh 'mvn clean package'
            }
        }
        stage("Deploy to Sonar") {
            steps{
                script{
                    withSonarQubeEnv(installationName: 'sonarqube-9.9.0.65466', credentialsId: 'jenkins-sonar-token') {
                    sh "${ tool ("sonar-scanner-4.8.0.2856")}/sonar-scanner"
                }

                    timeout(time: 1, unit: 'HOURS') {
                      def qg = waitForQualityGate()
                      if (qg.status != 'OK') {
                           error "Pipeline aborted due to quality gate failure: ${qg.status}"
                      }
                    }

                }  
            }
        }
        
        stage("Publish to Nexus Repository Manager") {
            steps {
                script {
                    pom = readMavenPom file: "pom.xml";
                    filesByGlob = findFiles(glob: "target/*.${pom.packaging}");
                    echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"
                    artifactPath = filesByGlob[0].path;
                    artifactExists = fileExists artifactPath;
                    if(artifactExists) {
                        echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version}";
                        nexusArtifactUploader(
                            nexusVersion: NEXUS_VERSION,
                            protocol: NEXUS_PROTOCOL,
                            nexusUrl: NEXUS_URL,
                            groupId: pom.groupId,
                            version: pom.version,
                            repository: NEXUS_REPOSITORY,
                            credentialsId: NEXUS_CREDENTIAL_ID,
                            artifacts: [
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: artifactPath,
                                type: pom.packaging],
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: "pom.xml",
                                type: "pom"]
                            ]
                        );
                    } else {
                        error "*** File: ${artifactPath}, could not be found";
                    }
                }
            }
        }
    }
    
    post {
        success {
            mail bcc: '', body: 'nexus  artifact uploaded successfully', cc: '', from: 'nvjagan@gmail.com', replyTo: '', subject: 'The Pipeline success', to: 'nvjagan@gmail.com'
        }
        failure {  
            mail bcc: '', body: 'nexus  artifact uploaded failed', cc: '', from: 'nvjagan@gmail.com', replyTo: '', subject: 'The Pipeline failed', to: 'nvjagan@gmail.com'
         } 
    }
}
