pipeline {
    agent any
    
    tools {
        maven 'M2'
    }
    
    //create environment to call it in the variable later globally//
    environment {
        registry_credentials = "docker-cred" //docker registry credentials configured in jenkins//
        sonarqube_credentials = "sq-1" //sonarqube credentials configured at jenkins//
        docker_registry = "anand40090/spring-boot-demo" //docker registery configured//
    }

    stages {
        stage('Git Pull') {
            steps {
                git branch: 'master', changelog: false, poll: false, url: 'https://github.com/anand40090/springboot-java-poject.git'
            }
        }
        stage('maven image build'){
            steps{
                sh 'mvn clean install'
            }
        }
        stage('Sonar Scan'){
            steps{
                withSonarQubeEnv(credentialsId: 'sq-1', installationName: 'sq-1'){
                    sh 'mvn sonar:sonar'
                }
                waitForQualityGate abortPipeline: false, credentialsId: 'sq-1'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    def imageName = "${docker_registry}:${BUILD_NUMBER}" //create variable for docker image//
                    sh "docker build -t ${imageName} ."
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    def imageName = "${docker_registry}:${BUILD_NUMBER}"
                    withCredentials([usernamePassword(credentialsId: "${registry_credentials}", passwordVariable: 'PASSWORD', usernameVariable: 'USERNAME')]) {
                        sh "echo $PASSWORD | docker login -u $USERNAME --password-stdin"
                        sh "docker push ${imageName}"
                    }
                }
            }
        }
        stage('Stop and Remove Previous Container') {
            steps {
                script {
                    def previousContainer = sh(script: "docker ps -aqf name=spring-boot-demo-", returnStdout: true).trim()
                    if (previousContainer) {
                        sh "docker stop ${previousContainer}"
                        sh "docker rm ${previousContainer}"
                    }
                }
            }
        }

        stage('Run Docker Container') {
            steps {
                script {
                    def imageName = "${docker_registry}:${BUILD_NUMBER}"
                    sh "docker run -itd -p 1244:8080 --name spring-boot-demo-${BUILD_NUMBER} ${imageName}"
                }
            }
        }
        stage('check container'){
            steps{
                sh 'docker ps '
            }
        }
    }
}

